CREATE TABLE MY_TABLE
(
  KEY1 CHAR(4),
  KEY2 CHAR(4),
  KEY3 CHAR(4),
  KEY4 CHAR(4),
  VAL NUMBER
);

/*
INSERT INTO 테이블명 VALUES (값,,,,); 각 COLUMN과 VALUES는 1:1 관계, 순차적인 값이 매핑
INSERT INTO 테이블명(컬럼명) VALUES (값,,,,); 각 COLUMN과 VALUES는 1:1 관계, 컬럼명에 대한 순차적인 값이 매핑
*/

DROP TABLE MY_TABLE;

SELECT * 
FROM MY_TABLE;

INSERT INTO MY_TABLE VALUES('AAAA','AAA','AA','A',100); 
INSERT INTO MY_TABLE VALUES('AAAA','AAA','AA','B',110);
INSERT INTO MY_TABLE VALUES('AAAA','AAA','BB','A',120);
INSERT INTO MY_TABLE VALUES('AAAA','AAA','BB','B',130);
INSERT INTO MY_TABLE VALUES('AAAA','BBB','AA','A',140);
INSERT INTO MY_TABLE VALUES('AAAA','BBB','AA','B',150);
INSERT INTO MY_TABLE VALUES('AAAA','BBB','BB','A',160);
INSERT INTO MY_TABLE VALUES('AAAA','BBB','BB','B',170);
INSERT INTO MY_TABLE VALUES('BBBB','AAA','AA','A',180);
INSERT INTO MY_TABLE VALUES('BBBB','AAA','AA','B',190);
INSERT INTO MY_TABLE VALUES('BBBB','AAA','BB','A',200);
INSERT INTO MY_TABLE VALUES('BBBB','AAA','BB','B',210);
INSERT INTO MY_TABLE VALUES('BBBB','BBB','AA','A',220);
INSERT INTO MY_TABLE VALUES('BBBB','BBB','AA','B',230);
INSERT INTO MY_TABLE VALUES('BBBB','BBB','BB','A',240);
INSERT INTO MY_TABLE VALUES('BBBB','BBB','BB','B',250);


SELECT * 
FROM MY_TABLE;

--Q1) 전체 개수를 출력해보자
SELECT COUNT(*) 
FROM MY_TABLE;

--Q2) KEY1, KEY2 그룹핑해서 그룹별 개수와 VAL합을 구해보자
SELECT KEY1, KEY2, COUNT(*), SUM(VAL)
FROM MY_TABLE
GROUP BY KEY1, KEY2
ORDER BY 1, 2;

--Q3) KEY를 이용한 ROLLUP을 해보자
SELECT KEY1, KEY2, COUNT(*), SUM(VAL)
FROM MY_TABLE
GROUP BY KEY1, ROLLUP(KEY2)
ORDER BY 1, 2;

--Q4) KEY1, KEY2, KEY3를 이용한 ROLLUP(KEY2, KEY3)을 해보자
SELECT KEY1, KEY2, KEY3, COUNT(*), SUM(VAL)
FROM MY_TABLE
GROUP BY KEY1, ROLLUP(KEY3, KEY2)
ORDER BY 1, 3, 2;

--Q5) KEY1, KEY2, KEY3, KEY4를 이용한 ROLLUP을 해보자
SELECT KEY1, KEY2, KEY3, KEY4, COUNT(*), SUM(VAL)
FROM MY_TABLE
GROUP BY KEY1, KEY2, ROLLUP(KEY3, KEY4)
ORDER BY 1, 2, 3, 4;

SELECT KEY1, KEY2, KEY3, KEY4, COUNT(*), SUM(VAL)
FROM MY_TABLE
GROUP BY KEY1, KEY2, ROLLUP((KEY3, KEY4))
ORDER BY 1, 2, 3, 4;

--Q6) GROUPING 을 해보자 1: 집계가 된 열, 0: 집계가 되지 않은 열
SELECT GROUPING(KEY1) AS GP01, COUNT(*), SUM(VAL)
FROM MY_TABLE
GROUP BY KEY1;

--Q7) 전체 행을 삭제(SCHEMA는 그대로)
DELETE MY_TABLE;

--Q8) GROUPING을 해보자
SELECT GROUPING(KEY1) AS GP01, 
GROUPING(KEY2) AS GP02,
GROUPING(KEY3) AS GP03,
COUNT(*), SUM(VAL)
FROM MY_TABLE
GROUP BY KEY1, ROLLUP(KEY2, KEY3);

--Q9) GROUPING_ID
SELECT GROUPING(KEY1) AS GP01, 
GROUPING(KEY2) AS GP02,
GROUPING(KEY3) AS GP03,
GROUPING_ID(KEY1, KEY2, KEY3) AS GID, KEY1, KEY2, KEY3,
COUNT(*), SUM(VAL)
FROM MY_TABLE
GROUP BY KEY1, ROLLUP(KEY2, KEY3);

SELECT GROUPING(KEY1) AS GP01, 
GROUPING(KEY2) AS GP02,
GROUPING(KEY3) AS GP03,
GROUPING_ID(KEY1, KEY2, KEY3) AS GID, KEY1, KEY2, KEY3,
COUNT(*), SUM(VAL)
FROM MY_TABLE
GROUP BY KEY1, ROLLUP(KEY2, KEY3)
ORDER BY KEY1, KEY2, KEY3;

--SELECT GROUPING(KEY1, KEY2, KEY3), GROUPING_ID(KEY1, KEY2, KEY3) AS GID, KEY1, KEY2, KEY3,
--COUNT(*), SUM(VAL)
--FROM MY_TABLE
--GROUP BY KEY1, ROLLUP(KEY2, KEY3)
--ORDER BY KEY1, KEY2, KEY3;

--Q10) CUBE를 이용해서 KEY1, KEY2, KEY3를 GROUPING 해보자
-- (KEY1) (KEY2) (KEY3) (KEY1, KEY2), (KEY1, KEY3), (KEY2, KEY3), (KEY1, KEY2, KEY3) -> 7SETS
SELECT GROUPING(KEY1) AS GP01, 
GROUPING(KEY2) AS GP02,
GROUPING(KEY3) AS GP03,
GROUPING_ID(KEY1, KEY2, KEY3) AS GID, KEY1, KEY2, KEY3,
COUNT(*), SUM(VAL)
FROM MY_TABLE
GROUP BY CUBE(KEY1, KEY2, KEY3)
ORDER BY KEY1, KEY2, KEY3;

--Q11) CUBE를 이용해서 (KEY1, (KEY2, KEY3))를 GROUPING 해보자
SELECT GROUPING(KEY1) AS GP01,
GROUPING(KEY2) AS GP02,
GROUPING(KEY3) AS GP03,
GROUPING_ID(KEY1, KEY2, KEY3) AS GID, KEY1, KEY2, KEY3,
COUNT(*), SUM(VAL)
FROM MY_TABLE
GROUP BY CUBE(KEY1, (KEY2, KEY3))
ORDER BY KEY1, KEY2, KEY3;

--Q12) CUBE를 이용해서 (KEY2, (KEY1, KEY3))을 이용해서 GROUPING 해보자
SELECT GROUPING(KEY1) AS GP01, 
GROUPING(KEY2) AS GP02,
GROUPING(KEY3) AS GP03,
GROUPING_ID(KEY1, KEY2, KEY3) AS GID, KEY1, KEY2, KEY3,
COUNT(*), SUM(VAL)
FROM MY_TABLE
GROUP BY CUBE(KEY2, (KEY1, KEY3))
ORDER BY KEY2, KEY1, KEY3;

--Q13) GROUPING SET을 이용해 보자 / 열의 집합을 이용한 부분합을 RETURN
SELECT GROUPING(KEY1) AS GP01,
GROUPING(KEY2) AS GP02,
GROUPING(KEY3) AS GP03,
GROUPING_ID(KEY1, KEY2, KEY3) AS GID, KEY1, KEY2, KEY3,
COUNT(*), SUM(VAL)
FROM MY_TABLE
GROUP BY GROUPING SETS(KEY2, (KEY1, KEY3), ())
ORDER BY KEY1, KEY2, KEY3;


